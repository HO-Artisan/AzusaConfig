plugins {
    id "com.github.johnrengelman.shadow" version "8.+"
}

architectury {
    platformSetupLoomIde()
    forge()
}

project.archivesBaseName = rootProject.archivesBaseName + "-forge"

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    shadowCommon "org.quiltmc:quilt-config:${rootProject.quiltconfig_version}"
    shadowCommon "org.quiltmc.parsers:json:${project.quiltparsers_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    relocate "org.quiltmc.config", "${rootProject.maven_group}.shadow.quiltconfig"
    relocate "org.quiltmc.parsers", "${rootProject.maven_group}.shadow.quiltparsers"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

unifiedPublishing {
    project {
        displayName = "[Forge] $rootProject.version"
        releaseType = "alpha"
        changelog = file("CHANGELOG.md").getText('UTF-8')
        gameVersions = ["1.20", "1.20.1"]
        gameLoaders = ["forge"]

        mainPublication remapJar
        secondaryPublications.builtBy(sourcesJar)

        var CURSEFORGE_TOKEN = project.findProperty("CURSEFORGE_TOKEN") ?: System.getenv("CURSEFORGE_TOKEN")
        if (CURSEFORGE_TOKEN != null) {
            curseforge {
                token = CURSEFORGE_TOKEN
                id = rootProject.curseforge_id
            }
        }

        var MODRINTH_TOKEN = project.findProperty("MODRINTH_TOKEN") ?: System.getenv("MODRINTH_TOKEN")
        if (MODRINTH_TOKEN != null) {
            modrinth {
                token = MODRINTH_TOKEN
                id = rootProject.modrinth_id
                version = "$rootProject.version-forge"
            }
        }
    }
}
