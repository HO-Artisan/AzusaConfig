plugins {
    id "com.github.johnrengelman.shadow" version "8.+"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

project.archivesBaseName = rootProject.archivesBaseName + "-fabric"

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    include "org.quiltmc:quilt-config:${rootProject.quiltconfig_version}"
    include "org.quiltmc.parsers:json:${rootProject.quiltparsers_version}"
    shadowCommon "com.electronwill.night-config:core:${rootProject.nightconfig_version}"
    shadowCommon "com.electronwill.night-config:toml:${rootProject.nightconfig_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    relocate "com.electronwill.nightconfig", "${rootProject.maven_group}.shadow.nightconfig"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

publisher {
    apiKeys {
        modrinth System.getenv("MODRINTH_TOKEN")
        curseforge System.getenv("CURSE_TOKEN")
    }

    setCurseID("${project.curseforge_id}")
    setModrinthID("${project.modrinth_id}")
    setVersionType("alpha")
    setChangelog(file("CHANGELOG.md").getText("UTF-8"))
    setVersion("${project.version}-forge")
    setDisplayName("[Fabric] ${project.version}")
    setGameVersions("1.20", "1.20.1")
    setLoaders("fabric")
    setArtifact(remapJar)
    addAdditionalFile(sourcesJar)
}
